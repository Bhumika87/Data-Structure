#include<iostream>
using namespace std;
int bottm_up(int n,int* dp)
{
    if(n==1)
    {
        return dp[n]=0;
    }
    if(dp[n] != -1)
    {
        return dp[n];
    }
    //recursive case
    int op1,op2,op3 = INT_MAX;
    if(n%3 == 0)
    {
        opt1=topdown(n/3,dp);
    }
    if(n%2 == 0)
    {
        opt1=topdown(n/2,dp);
    }
    op3= topdown(n-1,dp);

    return dp[n]=min(op1,min(op2,op3));

}
int bottomUp(int n)
{
    vec<int> dp(n+1);
    dp[1]=0;
    for(int i=2;i<=n;++1)
    {
       int op1,op2,op3 = INT_MAX;
    if(n%3 == 0)
    {
        opt1=dp(i/3);
    }
    if(n%2 == 0)
    {
        opt2=dp=(i/2);
    }
    op3= dp(n-1);

    return dp[n]=min(op1,min(op2,op3))+1;

    }
}
int main()
{
    int n;
    cin>>n;
    int dp[1000];
    memset(dp,-1,sizeof dp);
    return 0;
}